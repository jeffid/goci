name: Go-CI Main

on: [ push, pull_request ]

jobs:
  lint-test:
    name: Lint and test with go ${{ matrix.go_version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    environment:
      name: helloci
    strategy:
      matrix:
        go_version: [ 1.18 ]
        os: [ ubuntu-22.04 ]
    steps:
      - name: Set up Go ${{ matrix.go_version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go_version }}
        run: go env

      - name: Checkout
        uses: actions/checkout@v3

      - name: Lint
          uses: golangci/golangci-lint-action@v3
          with:
            version: latest

      - name: Run unit tests.
        run: |
          go test -v -coverprofile cover.out -covermode=atomic
          cat cover.out > coverage.txt

      - name: Upload Coverage report to CodeCov
        uses: codecov/codecov-action@v3
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.txt


  build-push:
    name: Build and push with go ${{ matrix.go_version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    environment:
      name: helloci
    strategy:
      matrix:
        go_version: [ 1.18 ]
        os: [ ubuntu-22.04 ]
    steps:
      - name: Set up Go ${{ matrix.go_version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ matrix.go_version }}
        run: go env

      - name: Checkout
        uses: actions/checkout@v3

      - name: Build
        run: |
          pwd
          ls -laph
          go build  -v -o goci .

      - name: Run program
        run: ./goci

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: goci
          path: goci

      - name: Publish to Registry (Aliyun)
        uses: elgohr/Publish-Docker-Github-Action@v4
        with:
          name: registry.cn-shenzhen.aliyuncs.com/jeffid/helloci  # docker image 的名字
          username: ${{ secrets.DOCKER_USERNAME}} # 用户名
          password: ${{ secrets.DOCKER_PASSWORD }} # 密码
          registry: registry.cn-shenzhen.aliyuncs.com # Registry
          dockerfile: Dockerfile # 指定 Dockerfile 的位置
          tag_names: true # 是否将 release 的 tag 作为 docker image 的 tag

      - name: Publish to Registry (Tencnet Cloud)
        uses: elgohr/Publish-Docker-Github-Action@v4
        with:
          name: ccr.ccs.tencentyun.com/jeffid/helloci  # docker image 的名字
          username: ${{ secrets.TC_DOCKER_USERNAME}} # 用户名
          password: ${{ secrets.TC_DOCKER_PASSWORD }} # 密码
          registry: ccr.ccs.tencentyun.com # Registry
          dockerfile: Dockerfile # 指定 Dockerfile 的位置
          tag_names: true # 是否将 release 的 tag 作为 docker image 的 tag
